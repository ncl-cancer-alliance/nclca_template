# This is a sample .env file, to convert this to a working .env file rename it from "sample.env" to ".env".
# You may want to remove the Usage instructions below and this text from your final .env file

# Usage:
# In the .env file, add your env variables with values.
#
# MY_DATA = "./data/mydata.csv"
# ARCHIVE_DATA = False
#
# In your python script, import the load_dotenv and getenv modules, e.g.:
#
# -> from dotenv import load_dotenv
# -> from os import getenv
#
# After importing, include the following line of code to load the .env into the file
#
# -> load_dotenv(override=True)
#
# Then in your code you can access .env variables like this:
#
# -> my_data = getenv("MY_DATA)
#
# Note you cannot store Boolean (True/False) values in the .env file.
# You can eiher use 0 for False and 1 for True in the .env or 
# use the string "False" and "True" in the .env and convert them to Boolean in the python script:
#
# archive_data = (getenv(f"ARCHIVE_DATA") != "False")